@{
    ViewData["Title"] = "Index";
}

<div class="container-fluid">
    <div class="row mt-2">
        <div class="col-12 col-lg-6 col-xl">
            <!-- Value  -->
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted mb-2">
                                Proxy Count
                            </h6>
                            <span id="proxyCount" class="h2 mb-0">
                                0
                            </span>
                        </div>
                        <div class="col-auto">
                            <i class="material-icons">language</i>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-12 col-lg-6 col-xl">

            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted mb-2">
                                Proxy Provider
                            </h6>
                            <span id="providerCount" class="h2 mb-0">
                                0
                            </span>

                        </div>
                        <div class="col-auto">
                            <i class="material-icons">cached</i>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-12 col-lg-6 col-xl">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted mb-2">
                                Test Servers
                            </h6>
                            <span id="testServerCount" class="h2 mb-0">
                                0
                            </span>

                        </div>
                        <div class="col-auto">
                            <i class="material-icons">done_all</i>
                        </div>
                    </div> 
                </div>
            </div>

        </div>
    </div> 

    <div class="row mt-4">
        <div class="card col-12">
            <div class="card-body">
                <h5 class="card-title">Proxy List</h5>
                <table id="example" class="table table-striped table-hover" style="width:100%">
                    <thead class="thead-dark">
                        <tr>
                            <th>Ip</th>
                            <th>Port</th>
                            <th>First Found</th>
                            <th>Last Found</th>
                            <th>Last Success Test</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>

</div>

@section Scripts
{
    <script>
        $(document).ready(function () {

            $.fn.dataTable.moment("DD/MM/YYYY HH:mm:ss");
            $.fn.dataTable.moment("DD/MM/YYYY");

            $('#example').DataTable({
                // Design Assets
                stateSave: true,
                autoWidth: true,
                // ServerSide Setups
                processing: true,
                serverSide: true,
                // Paging Setups
                paging: true,
                displayStart: 0,
                // Searching Setups
                searching: { regex: true },
                // Ajax Filter
                ajax: {
                    type: "POST",
                    url: "/api/proxy",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {
                        return JSON.stringify(d);
                    }
                },
                // Columns Setups
                columns: [
                    { data: "ip" },
                    { data: "port" },
                    {
                        data: "createdOn",
                        render: function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {
                                return moment(data).format("ddd DD/MM/YYYY HH:mm:ss");
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }
                    },
                    {
                        data: "modifiedOn",
                        render: function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {
                                return moment(data).format("ddd DD/MM/YYYY HH:mm:ss");
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }
                    },
                    {
                        data: "lastFunctionalityTestDate",
                        render: function (data, type, row) {
                            if (data == null) {
                                return "";
                            }

                            var lastDate = moment(data);
                            var now = moment(new Date());
                            return now.diff(lastDate, 'minute') + ' minutes ago';
                        }
                    }
                ],
                // Column Definitions
                columnDefs: [
                    { targets: "no-sort", orderable: false },
                    { targets: "port", orderable: false }
                ]
            });

            $.ajax("/home/proxycount").done(function (data) {
                $("#proxyCount").text(data);
            });
            $.ajax("/home/providerCount").done(function (data) {
                $("#providerCount").text(data);
            });

            $.ajax("/home/TestServiceCount").done(function (data) {
                $("#testServerCount").text(data);
            });
        });

    </script>
}